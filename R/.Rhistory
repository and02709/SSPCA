geom_point(alpha = 0.75, size=.85) +
geom_hline(yintercept=man.thresh, color="red", linetype="solid") +
scale_x_continuous(label = axis_set$group, breaks = axis_set$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim[1])) +
scale_color_manual(values = rep(c("#276FBF", "#183059"), unique(length(axis_set$group)))) +
scale_size_continuous(range = c(0.25,2.5)) +
labs(x = NULL,
y = "Absolute Value \nEigenvector \nLoadings") +
ggtitle(gg_plot_title) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = ggtext::element_markdown(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 0.5)
)
}
else{
manhplot <- ggplot2::ggplot(data=plot_data, mapping=aes(x = idx_cum, y = U,
color = as_factor(group))) +
#geom_hline(yintercept = 2.2, color = "grey40", linetype = "dashed") +
geom_point(alpha = 0.75, size=.85) +
scale_x_continuous(label = axis_set$group, breaks = axis_set$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim[1])) +
scale_color_manual(values = rep(c("#276FBF", "#183059"), unique(length(axis_set$group)))) +
scale_size_continuous(range = c(0.25,2.5)) +
labs(x = NULL,
y = "Absolute Value \nEigenvector \nLoadings") +
ggtitle(gg_plot_title) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = ggtext::element_markdown(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 0.5)
)
}
png(filename=fname)
print(manhplot)
dev.off()
}
}
}
}
else{
Umat <- as.matrix(Zlist$U)
num.vec <- ncol(Umat)
num.load <- nrow(Umat)
dftemp <- read.table("ROI.txt", header=T)
dftemp$group <- as.factor(dftemp$group)
# use existing mapping file.
dftemp <- read.table("ROI.txt", header=TRUE)
dftemp$group <- as.factor(dftemp$group)
# add y axis values to dataframe
for(j in 1:num.vec){
if(num.vec==1){
dftemp$U <- abs(Umat)
}
else{
dftemp$U <- abs(Umat[,j])
}
# not convinced these variables are needed for anything
#dgroup <- levels(dftemp$group)
#dftemp$plot.index <- seq(1:length(dftemp$index))
# next code :
# make groups by variable "group"
# within a group, order by index value.
# make a new variable sequence 1 to n within group called "newindx"
# order dataframe by group then newindx within group
# save in dftemp
dftemp<- dftemp %>% dplyr::group_by(group) %>%
dplyr::arrange(index) %>%
dplyr::mutate(newindx = 1:dplyr::n()) %>%
dplyr::arrange(group,newindx)
# now need to have x axis sequencing change smoothly across group levels
# compute max value of newindx within each group
# cumsum() makes a running total of the max_idx values that came prior
# make new variable idx_add which contains the value of running index that
# was at the end of the previous group - - this makes a value of start index (idx_add)
# for this group's row in this dframe.
dftemp2 <-  dftemp %>% dplyr::group_by(group) %>%
dplyr::summarise(max_idx = max(newindx)) %>%
dplyr::mutate(idx_add = dplyr::lag(cumsum(max_idx), default = 0)) %>%
dplyr::select(group, idx_add) %>%
dplyr::ungroup()
# join the start index dframe (dftemp2) with the plot dataframe dftemp
# make a new variable idx_cum that creates the running index position for each
# observation. The plot_data dataframe will be used in ggplot.
plot_data <- dftemp %>% dplyr::inner_join(dftemp2, by="group") %>%
dplyr::mutate(idx_cum = newindx + idx_add)
# find the middle index position to put the group index label on x axis:
axis_set <- plot_data %>%
dplyr::group_by(group) %>%
dplyr::summarize(center = mean(idx_cum))
# next code makes a column with upper limit for y plotting
ylim <- plot_data %>%
dplyr::mutate(ylim = (max(U) + 0.2*max(U))) %>%
dplyr::pull(ylim)
fname <- paste0("Manhattan Cifti Eigenvector ", j, ".png")
if(j==1){
plot.list <- list(fname)
}
else{
plot.list <- append(plot.list, list(fname))
}
gg_plot_title <- paste0("Manhattan Cifti Eigenvector ", j)
if(man.thresh > 0){
manhplot <- ggplot2::ggplot(data=plot_data, mapping=aes(x = idx_cum, y = U,
color = as_factor(group))) +
#geom_hline(yintercept = 2.2, color = "grey40", linetype = "dashed") +
geom_point(alpha = 0.75, size=.85) +
geom_hline(yintercept=man.thresh, color="red", linetype="solid") +
scale_x_continuous(label = axis_set$group, breaks = axis_set$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim[1])) +
scale_color_manual(values = rep(c("#276FBF", "#183059"), unique(length(axis_set$group)))) +
scale_size_continuous(range = c(0.25,2.5)) +
labs(x = NULL,
y = "Absolute Value \nEigenvector \nLoadings") +
ggtitle(gg_plot_title) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = ggtext::element_markdown(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 0.5)
)
}
else{
manhplot <- ggplot2::ggplot(data=plot_data, mapping=aes(x = idx_cum, y = U,
color = as_factor(group))) +
#geom_hline(yintercept = 2.2, color = "grey40", linetype = "dashed") +
geom_point(alpha = 0.75, size=.85) +
scale_x_continuous(label = axis_set$group, breaks = axis_set$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim[1])) +
scale_color_manual(values = rep(c("#276FBF", "#183059"), unique(length(axis_set$group)))) +
scale_size_continuous(range = c(0.25,2.5)) +
labs(x = NULL,
y = "Absolute Value \nEigenvector \nLoadings") +
ggtitle(gg_plot_title) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = ggtext::element_markdown(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 0.5)
)
}
png(filename=fname)
print(manhplot)
dev.off()
}
}
return(plot.list)
}
OmniSPCA <- function(xtrain, ytrain, xtest, ytest, resp.names = NULL, ycont=T, ybinary=F, sepAnalysis = F,
K=1, sumabsv=0, strictEV=T, Sens.analysis=F,
sepclass=T, binClassCombine=F, NoExtraEV = F, ydensity=F,
dpyhat=F, dsq=F, qqplot=F, opplot=F,
Evec.plot = F, manhattan.plot=F, cifti.man.plot=F,
man.thresh = 0, niter=20, orth=TRUE,
trace=TRUE, v=NULL, center=TRUE, test_metrics=T,
cnames=NULL, vpos=FALSE, vneg=FALSE, compute.pve=TRUE){
if(is_tibble(ytrain) || is_tibble(ytest)){
ytrain <- as.matrix(ytrain)
ytest <- as.matrix(ytest)
}
nobs <- nrow(ytrain)
npred <- ncol(xtrain)
nresp <- ncol(ytrain)
if(!is.null(resp.names) && length(resp.names)!=nresp) stop("Incorrect length of response names to response matrix provided")
if(!is.null(resp.names)){
colnames(ytrain) <- resp.names
colnames(ytest) <- resp.names
}
else{
resp.names <- paste0("y", 1:nresp)
}
if(center){
xmeans <- colMeans(xtrain)
xtrain <- xtrain-xmeans
xtest <- xtest-xmeans
}
nobs <- nrow(xtrain)
npred <- ncol(xtrain)
nresp <- ncol(ytrain)
Dual <- ifelse(npred>nobs, TRUE, FALSE)
if(sepAnalysis){
if(sumabsv==0){
if(Dual){
Z <- LoopDualSPC(ytrain=ytrain, xtrain=xtrain, ytest=ytest, xtest=xtest,
ycont=ycont, nresp=nresp, strictEV=strictEV, nTopEvecs=K)
}
else{
Z <- LoopSPC(ytrain=ytrain, xtrain=xtrain, ytest=ytest, xtest=xtest,
ycont=ycont, nresp=nresp, strictEV=strictEV, nTopEvecs=K)
}
}
else{
Z <- LoopSSPC(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ycont=ycont,
nresp=nresp, sumabsv=sumabsv, niter=niter, K=K, orth=orth,
trace=trace, v=v, center=center, cnames=cnames, vpos=vpos,
vneg=vneg, compute.pve=compute.pve, strictEV=strictEV)
}
}
else{
if(sumabsv==0){
if(Dual){
Z <- DualSPC(ytrain=ytrain, xtrain=xtrain, ytest=ytest, xtest=xtest,
ycont=ycont, ybinary=ybinary, nresp=nresp, strictEV=strictEV,
nTopEvecs=K)
}
else{
Z <- SPC(ytrain=ytrain, xtrain=xtrain, ytest=ytest, xtest=xtest,
ycont=ycont, ybinary=ybinary, nresp=nresp, strictEV=strictEV, nTopEvecs=K)
}
}
else{
Z <- SSPC(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ycont=ycont, ybinary=ybinary,
nresp=nresp, sumabsv=sumabsv,
niter=niter, K=K, orth=orth, trace=trace, v=v, center=center,
cnames=cnames, vpos=vpos, vneg=vneg, compute.pve=compute.pve,
strictEV=strictEV)
}
}
if(sepAnalysis){
if(ycont){
y_hat <- LMcontSep(ytrain=ytrain, ytest=ytest, Z=Z, nresp=nresp, resp.names=resp.names)
}
if(!ycont && ybinary){
y_hat <- GLMbinSep(ytrain=ytrain, ytest=ytest, Z=Z, nresp=nresp, resp.names=resp.names)
}
if(!ycont && !ybinary){
y_hat <- GLMmultiSep(ytrain=ytrain, ytest=ytest, Z=Z, nresp=nresp, resp.names=resp.names)
}
}
else{
if(ycont){
y_hat <- LMcont(ytrain=ytrain, ytest=ytest, ztrain=Z$Z, ztest=Z$z, nresp=nresp, resp.names=resp.names)
}
if(!ycont && ybinary){
y_hat <- GLMbin(ytrain=ytrain, ztrain=Z$Z, ytest=ytest, ztest=Z$z, nresp=nresp, resp.names=resp.names)
}
if(!ycont && !ybinary){
y_hat <- GLMmulti(ytrain=ytrain, ztrain=Z$Z, ytest=ytest, ztest=Z$z, nresp=nresp, resp.names=resp.names)
}
}
if(test_metrics){
if(ycont){
TrTs <- continuous_metrics(ytrain=ytrain, ytest=ytest, y_hat=y_hat, nresp=nresp, resp.names=resp.names)
}
else{
TrTs <- categorical_metrics(ytrain=ytrain, ytest=ytest, y_hat=y_hat, nresp=nresp, resp.names=resp.names)
}
}
else{
TrTs <- NULL
}
if(Evec.plot){
plot.list <- EvecPlot(Zlist=Z, sepAnalysis=sepAnalysis, nresp=nresp, resp.names=resp.names)
}
else{
plot.list <- NULL
}
if(manhattan.plot){
man.plot.list <- ManPlot(Zlist=Z, sepAnalysis=sepAnalysis, nresp=nresp, man.thresh=man.thresh, resp.names=resp.names)
}
else{
man.plot.list <- NULL
}
if(cifti.man.plot){
if(npred != 61776) stop("Wrong number of predictors for a CIFTI format")
Cifti.manhattan.plot <- CifManPlot(Zlist=Z, sepAnalysis=sepAnalysis, nresp=nresp, man.thresh=man.thresh, resp.names=resp.names)
}
else{
Cifti.manhattan.plot <- NULL
}
if(ydensity && ycont){
y.density.list <- ydens(ytrain=ytrain, ytest=ytest, nresp=nresp, resp.names=resp.names)
}
else{
y.density.list <- NULL
}
if(dpyhat && ycont){
yhat.density.list <- densplotyhat(y_hat=y_hat, nresp=nresp, resp.names=resp.names)
}
else{
yhat.density.list <- NULL
}
if(dsq && ycont){
ysq.density.list <- densplotSq(TrTs = TrTs, nresp=nresp, resp.names=resp.names)
}
else{
ysq.density.list <- NULL
}
if(qqplot && ycont){
QQ.list <- QQplot(ytrain=ytrain, ytest=ytest, nresp=nresp, resp.names=resp.names)
}
else{
QQ.list <- NULL
}
if(opplot && ycont){
OP.list <- OPplot(ytrain=ytrain, ytest=ytest, yhat=y_hat, nresp=nresp, resp.names=resp.names)
}
else{
OP.list <- NULL
}
return(list(Z, y_hat, TrTs, plot.list, man.plot.list, Cifti.manhattan.plot, y.density.list, yhat.density.list, ysq.density.list, QQ.list))
}
nobs=100
f_rnormdf <- function(j){
setNames(data.frame(rnorm(n=nobs, mean=0, sd=1)), paste0('x',j))
}
#df <- purrr::map_dfc(c(1:61776), f_rnormdf)
df <- purrr::map_dfc(c(1:100), f_rnormdf)
e1 <- rnorm(nobs, 0, 1)
#e2 <- rnorm(nobs, 0, 1)
#e3 <- rnorm(nobs, 0, 1)
#df$y1 <- rowSums(df[,1:100]) + e1
#df$y2 <- rowSums(df[,c(1:10, 101:190)]) + e2
#df$y3 <- rowSums(df[,c(1:10, 201:290)]) + e3
df$y1 <- rowSums(df[,1:10]) + 3.2*e1
#df$y2 <- rowSums(df[,c(1,2,3, 11:17)]) + 3.2*e2
#df$y3 <- rowSums(df[,c(1,2,3, 21:27)]) + 3.2*e3
parts <- partition(df, p = 0.25)
dftest <- parts[[1]]
dftrain <- parts[[2]]
xtrain <- dftrain %>% dplyr::select(-y1)
xtest <- dftest %>% dplyr::select(-y1)
ytrain <- dftrain %>% dplyr::select(y1)
ytest <- dftest %>% dplyr::select(y1)
#set1 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
#                 ybinary=F,
#                 sepAnalysis=T, K=2, sumabsv = 0, strictEV=F, Sens.analysis=F, cifti.man.plot=F,
#                 manhattan.plot = T, resp.names = c("Moe", "Larry", "Curly"))
set2 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
ybinary=F,
sepAnalysis=F, K=5, sumabsv = 0, strictEV=F, Sens.analysis=F, ydensity=F,
dpyhat=F, dsq=F, qqplot=F, opplot=F,
Evec.plot = F, manhattan.plot=T, cifti.man.plot=F, man.thresh = 0)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
UComb <- set2[[1]]$U
M <- data.frame(UComb)
#colnames(M) <- c("S1", "S2", "S3", "C1", "C2", "C3")
#yhat1_calc_sep <- (0.3110)*rep(1,250) + (-4.5949)*ZSep
#yhat1_calc_com <- (0.3208)*rep(1,250) + (3.6007*ZComb[,1]) + ((-2.7921)*ZComb[,2]) + (0.8536*ZComb[,3])
#yhat1_sep <- set1[[2]][[2]][,1]
#yhat1_com <- set2[[2]]$yhat_test[,1]
#yhat <- data.frame(ytest[,1], yhat1_calc_sep, yhat1_sep, yhat1_calc_com, yhat1_com, (ytest[,1]-yhat1_sep)^2, (ytest[,1]-yhat1_com)^2)
#U1 <- data.frame(set1[[1]][[1]]$U, set1[[1]][[2]]$U, set1[[1]][[3]]$U)
#U2 <- set2[[1]]$U
#UU <- data.frame(U1[,1], U2[,1], U1[,2], U2[,2], U1[,3], U2[,3])
M
nobs=100
f_rnormdf <- function(j){
setNames(data.frame(rnorm(n=nobs, mean=0, sd=1)), paste0('x',j))
}
#df <- purrr::map_dfc(c(1:61776), f_rnormdf)
df <- purrr::map_dfc(c(1:100), f_rnormdf)
e1 <- rnorm(nobs, 0, 1)
#e2 <- rnorm(nobs, 0, 1)
#e3 <- rnorm(nobs, 0, 1)
#df$y1 <- rowSums(df[,1:100]) + e1
#df$y2 <- rowSums(df[,c(1:10, 101:190)]) + e2
#df$y3 <- rowSums(df[,c(1:10, 201:290)]) + e3
df$y1 <- rowSums(df[,1:10]) + 3.2*e1
#df$y2 <- rowSums(df[,c(1,2,3, 11:17)]) + 3.2*e2
#df$y3 <- rowSums(df[,c(1,2,3, 21:27)]) + 3.2*e3
parts <- partition(df, p = 0.25)
dftest <- parts[[1]]
dftrain <- parts[[2]]
xtrain <- dftrain %>% dplyr::select(-y1)
xtest <- dftest %>% dplyr::select(-y1)
ytrain <- dftrain %>% dplyr::select(y1)
ytest <- dftest %>% dplyr::select(y1)
#set1 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
#                 ybinary=F,
#                 sepAnalysis=T, K=2, sumabsv = 0, strictEV=F, Sens.analysis=F, cifti.man.plot=F,
#                 manhattan.plot = T, resp.names = c("Moe", "Larry", "Curly"))
set2 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
ybinary=F,
sepAnalysis=F, K=5, sumabsv = 0, strictEV=F, Sens.analysis=F, ydensity=F,
dpyhat=F, dsq=F, qqplot=F, opplot=F,
Evec.plot = F, manhattan.plot=T, cifti.man.plot=F, man.thresh = 0)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
UComb <- set2[[1]]$U
M <- data.frame(UComb)
#colnames(M) <- c("S1", "S2", "S3", "C1", "C2", "C3")
#yhat1_calc_sep <- (0.3110)*rep(1,250) + (-4.5949)*ZSep
#yhat1_calc_com <- (0.3208)*rep(1,250) + (3.6007*ZComb[,1]) + ((-2.7921)*ZComb[,2]) + (0.8536*ZComb[,3])
#yhat1_sep <- set1[[2]][[2]][,1]
#yhat1_com <- set2[[2]]$yhat_test[,1]
#yhat <- data.frame(ytest[,1], yhat1_calc_sep, yhat1_sep, yhat1_calc_com, yhat1_com, (ytest[,1]-yhat1_sep)^2, (ytest[,1]-yhat1_com)^2)
#U1 <- data.frame(set1[[1]][[1]]$U, set1[[1]][[2]]$U, set1[[1]][[3]]$U)
#U2 <- set2[[1]]$U
#UU <- data.frame(U1[,1], U2[,1], U1[,2], U2[,2], U1[,3], U2[,3])
M <- data.frame(UComb)
M
nobs=100
f_rnormdf <- function(j){
setNames(data.frame(rnorm(n=nobs, mean=0, sd=1)), paste0('x',j))
}
#df <- purrr::map_dfc(c(1:61776), f_rnormdf)
df <- purrr::map_dfc(c(1:100), f_rnormdf)
e1 <- rnorm(nobs, 0, 1)
#e2 <- rnorm(nobs, 0, 1)
#e3 <- rnorm(nobs, 0, 1)
#df$y1 <- rowSums(df[,1:100]) + e1
#df$y2 <- rowSums(df[,c(1:10, 101:190)]) + e2
#df$y3 <- rowSums(df[,c(1:10, 201:290)]) + e3
df$y1 <- rowSums(df[,1:10]) + 3.2*e1
#df$y2 <- rowSums(df[,c(1,2,3, 11:17)]) + 3.2*e2
#df$y3 <- rowSums(df[,c(1,2,3, 21:27)]) + 3.2*e3
parts <- partition(df, p = 0.25)
dftest <- parts[[1]]
dftrain <- parts[[2]]
xtrain <- dftrain %>% dplyr::select(-y1)
xtest <- dftest %>% dplyr::select(-y1)
ytrain <- dftrain %>% dplyr::select(y1)
ytest <- dftest %>% dplyr::select(y1)
#set1 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
#                 ybinary=F,
#                 sepAnalysis=T, K=2, sumabsv = 0, strictEV=F, Sens.analysis=F, cifti.man.plot=F,
#                 manhattan.plot = T, resp.names = c("Moe", "Larry", "Curly"))
set2 <- OmniSPCA(xtrain=xtrain, ytrain=ytrain, xtest=xtest, ytest=ytest, ycont=T,
ybinary=F,
sepAnalysis=F, K=5, sumabsv = 0, strictEV=F, Sens.analysis=F, ydensity=F,
dpyhat=F, dsq=F, qqplot=F, opplot=F,
Evec.plot = F, manhattan.plot=T, cifti.man.plot=F, man.thresh = 0)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
UComb <- set2[[1]]$U
M <- data.frame(UComb)
#colnames(M) <- c("S1", "S2", "S3", "C1", "C2", "C3")
#yhat1_calc_sep <- (0.3110)*rep(1,250) + (-4.5949)*ZSep
#yhat1_calc_com <- (0.3208)*rep(1,250) + (3.6007*ZComb[,1]) + ((-2.7921)*ZComb[,2]) + (0.8536*ZComb[,3])
#yhat1_sep <- set1[[2]][[2]][,1]
#yhat1_com <- set2[[2]]$yhat_test[,1]
#yhat <- data.frame(ytest[,1], yhat1_calc_sep, yhat1_sep, yhat1_calc_com, yhat1_com, (ytest[,1]-yhat1_sep)^2, (ytest[,1]-yhat1_com)^2)
#U1 <- data.frame(set1[[1]][[1]]$U, set1[[1]][[2]]$U, set1[[1]][[3]]$U)
#U2 <- set2[[1]]$U
#UU <- data.frame(U1[,1], U2[,1], U1[,2], U2[,2], U1[,3], U2[,3])
M
M^2
order(M^2, decreasing = T)
set3 <- OmniSPCA(xtrain=xtrain[,1:50], ytrain=ytrain, xtest=xtest[,1:50], ytest=ytest, ycont=T,
ybinary=F,
sepAnalysis=F, K=5, sumabsv = 0, strictEV=F, Sens.analysis=F, ydensity=F,
dpyhat=F, dsq=F, qqplot=F, opplot=F,
Evec.plot = F, manhattan.plot=T, cifti.man.plot=F, man.thresh = 0)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
UComb <- set3[[1]]$U
M1 <- data.frame(UComb)
M2 <- data.frame(UComb)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
U2 <- set2[[1]]$U
M1 <- data.frame(UComb)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
U1 <- set3[[1]]$U
M1 <- data.frame(U2)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
U1 <- set3[[1]]$U
M2 <- data.frame(U1)
data.frame(M1[1:50], M2)
M1
M2
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
U1 <- set2[[1]]$U
M1 <- data.frame(U1)
#USep1 <- set1[[1]][[1]]$U
#USep2 <- set1[[1]][[2]]$U
#USep3 <- set1[[1]][[3]]$U
U2 <- set3[[1]]$U
M2 <- data.frame(U2)
length(M1)
dim(M1)
dim(M2)
data.frame(M1[1:50,], M2)
data.frame(K1=M1[1:50,], K2=M2, order(M1[1:50,], decreasing = T), order(M2, decreasing = T))
data.frame(K1=M1[1:50,], K2=M2, order(M1[1:50,]^2, decreasing = T), order(M2^2, decreasing = T))
data.frame(K1=M1[1:50,], K2=M2, order(M1[1:50,]^2, M1[1:50,]/M2, decreasing = T), order(M2^2, decreasing = T))
clusterfuck <- data.frame(K1=M1[1:50,], K2=M2, K4=order(M1[1:50,]^2, decreasing = T), K5=order(M2, decreasing = T))
clusterfuck
colnames(clusterfuck) <- c("K1","K2", "K4", "K5")
clusterfuck
clusterfuck <- clusterfuck %>% mutate(K3=K1/K2)
clusterfuck
clusterfuck <- data.frame(K1=M1[1:50,], K2=M2, K4=order(M1[1:50,]^2, decreasing = T), K5=order(M2^2, decreasing = T))
colnames(clusterfuck) <- c("K1","K2", "K4", "K5")
clusterfuck <- clusterfuck %>% mutate(K3=K1/K2)
clusterfuck
summary(clusterfuck$K1)
summary(abs(clusterfuck$K1))
setwd("~/Cifti_Project/SSPCA/R")
